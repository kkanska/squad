#!/usr/bin/env bash

#########################################
#  Gate service script                  #
#########################################

#
#
# GMANAGER script
#
#   Bash proxy to invoke shell/python commands for Gate Service
#
#   Configure PYTHON_EXECUTABLE, PIP_EXECUTABLE and VIRTUALENV_EXECUTABLE
#   to set up executable names.
#
#   The manager needs at least Python 3.
#
#    Usage:
#        gmanager <mode>
#
#        Whre mode is:
#            init
#                Automatically create virtual environment for execution
#                Skip if it actually exists.
#
#            reset
#                Automatically create virtual environment for execution
#                Override any previous one.
#
#            up
#                Alias for executing setup and then server command
#
#
#  Piotr StyczyÅ„ski @styczynski
#  March 2018 MIT LICENSE
#
#

PYTHON_EXECUTABLE=python
PIP_EXECUTABLE=pip
VIRTUALENV_EXECUTABLE=virtualenv

${PIP_EXECUTABLE} --version > /dev/null 2> /dev/null
result="$?"

if [ ! "$result" = "0" ]; then
    echo "[!] Could not find python 3: \"${PIP_EXECUTABLE} --version\" not work!"
    echo "[.] Trying with \"python3\"..."
    PYTHON_EXECUTABLE=python3
    ${PIP_EXECUTABLE} --version > /dev/null 2> /dev/null
    result="$?"
fi

if [ ! "$result" = "0" ]; then
    echo "[!] Could not find python 3: \"${PIP_EXECUTABLE} --version\" not work!"
    echo "[.] Trying with \"python\"..."
    PYTHON_EXECUTABLE=python
    ${PIP_EXECUTABLE} --version > /dev/null 2> /dev/null
    result="$?"
fi

if [ ! "$result" = "0" ]; then
    echo "[!] Could not find python 3: \"${PIP_EXECUTABLE} --version\" not work!"
    echo "[!] Program will terminate."
    echo "[i] Please configure ./gmanager script before executing"
    echo "[i] Or link python 3 executable."
    exit 1
fi

if [ "$1" = "reset" ]; then
    echo "[i] Install virtualenv by pip.."
    ${PIP_EXECUTABLE} install virtualenv

    echo "[i] Create virtual environment..."
    ${VIRTUALENV_EXECUTABLE} venv

    echo "[i] Activate environment..."
    source ./venv/Scripts/activate || source ./venv/bin/activate

    echo "[i] Install requirements..."
    ${PIP_EXECUTABLE} install -r requirements.txt

    echo "[i] Deactivate environment..."
    deactivate
    
    echo "[i] Virtual env set up DONE"
else

    if [ "$1" = "init" ]; then
    
        if [ -d ./venv ]; then
            echo "[i] Virtual environment exists so skip initialization."
            
        else
            echo "[i] Install virtualenv by pip.."
            ${PIP_EXECUTABLE} install virtualenv

            echo "[i] Create virtual environment..."
            ${VIRTUALENV_EXECUTABLE} venv

            echo "[i] Activate environment..."
            source ./venv/Scripts/activate || source ./venv/bin/activate

            echo "[i] Install requirements..."
            ${PIP_EXECUTABLE} install -r requirements.txt
            
            echo "[i] Deactivate environment..."
            deactivate
            
            echo "[i] Virtual env set up DONE"
        
        fi
    else

        if [ "$1" = "up" ]; then
        
            echo "[i] Enter fast init-dev mode."
            ./gmanager init
            ./gmanager dev "$@"
        
        else

            if [ "$1" = "dev" ]; then
          
              if [ -d ./venv ]; then
                  
                  source ./venv/Scripts/activate || source ./venv/bin/activate
                  
                  echo ""
                  ${PYTHON_EXECUTABLE} ./bin/manage.py "$@"
                  echo "[i] Terminate process shell / deactivated environment."
                  
                  deactivate
                  
              else
                  echo ""
                  echo ""
                  echo "[!] WARNNING! Running without local virtual env configured!"
                  echo "[!]           Execute './gmanager setup' command to initialize one!"
                  echo ""
                  ${PYTHON_EXECUTABLE} ./bin/manage.py "$@"
                  echo "[i] Terminate process shell."
              fi
              
            else
              echo ""
              echo "  Usage:"
              echo "    gmanager <mode>"
              echo ""
              echo "  Where mode is:"
              echo ""
              echo "    init"
              echo "      Automatically create virtual environment for execution"
              echo "       Skip if it actually exists."
              echo ""
              echo "    reset"
              echo "      Automatically create virtual environment for execution"
              echo "       Override any previous one."
              echo ""
              echo "    up"
              echo "      Alias for executing full out-of the box setup"
              echo ""
            fi
        
        fi

    fi

fi